// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: controller.proto

package controller

import (
	context "context"
	proto "github.com/GTLiSunnyi/cita-sdk-go/protos/proto"
	types "github.com/GTLiSunnyi/cita-sdk-go/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag bool `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *Flag) Reset() {
	*x = Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{0}
}

func (x *Flag) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type BlockNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *BlockNumber) Reset() {
	*x = BlockNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockNumber) ProtoMessage() {}

func (x *BlockNumber) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockNumber.ProtoReflect.Descriptor instead.
func (*BlockNumber) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{1}
}

func (x *BlockNumber) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type SystemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               uint32   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ChainId               []byte   `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Admin                 []byte   `protobuf:"bytes,3,opt,name=admin,proto3" json:"admin,omitempty"`
	BlockInterval         uint32   `protobuf:"varint,4,opt,name=block_interval,json=blockInterval,proto3" json:"block_interval,omitempty"`
	Validators            [][]byte `protobuf:"bytes,5,rep,name=validators,proto3" json:"validators,omitempty"`
	EmergencyBrake        bool     `protobuf:"varint,6,opt,name=emergency_brake,json=emergencyBrake,proto3" json:"emergency_brake,omitempty"`
	VersionPreHash        []byte   `protobuf:"bytes,7,opt,name=version_pre_hash,json=versionPreHash,proto3" json:"version_pre_hash,omitempty"`
	ChainIdPreHash        []byte   `protobuf:"bytes,8,opt,name=chain_id_pre_hash,json=chainIdPreHash,proto3" json:"chain_id_pre_hash,omitempty"`
	AdminPreHash          []byte   `protobuf:"bytes,9,opt,name=admin_pre_hash,json=adminPreHash,proto3" json:"admin_pre_hash,omitempty"`
	BlockIntervalPreHash  []byte   `protobuf:"bytes,10,opt,name=block_interval_pre_hash,json=blockIntervalPreHash,proto3" json:"block_interval_pre_hash,omitempty"`
	ValidatorsPreHash     []byte   `protobuf:"bytes,11,opt,name=validators_pre_hash,json=validatorsPreHash,proto3" json:"validators_pre_hash,omitempty"`
	EmergencyBrakePreHash []byte   `protobuf:"bytes,12,opt,name=emergency_brake_pre_hash,json=emergencyBrakePreHash,proto3" json:"emergency_brake_pre_hash,omitempty"`
}

func (x *SystemConfig) Reset() {
	*x = SystemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfig) ProtoMessage() {}

func (x *SystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfig.ProtoReflect.Descriptor instead.
func (*SystemConfig) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{2}
}

func (x *SystemConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SystemConfig) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *SystemConfig) GetAdmin() []byte {
	if x != nil {
		return x.Admin
	}
	return nil
}

func (x *SystemConfig) GetBlockInterval() uint32 {
	if x != nil {
		return x.BlockInterval
	}
	return 0
}

func (x *SystemConfig) GetValidators() [][]byte {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *SystemConfig) GetEmergencyBrake() bool {
	if x != nil {
		return x.EmergencyBrake
	}
	return false
}

func (x *SystemConfig) GetVersionPreHash() []byte {
	if x != nil {
		return x.VersionPreHash
	}
	return nil
}

func (x *SystemConfig) GetChainIdPreHash() []byte {
	if x != nil {
		return x.ChainIdPreHash
	}
	return nil
}

func (x *SystemConfig) GetAdminPreHash() []byte {
	if x != nil {
		return x.AdminPreHash
	}
	return nil
}

func (x *SystemConfig) GetBlockIntervalPreHash() []byte {
	if x != nil {
		return x.BlockIntervalPreHash
	}
	return nil
}

func (x *SystemConfig) GetValidatorsPreHash() []byte {
	if x != nil {
		return x.ValidatorsPreHash
	}
	return nil
}

func (x *SystemConfig) GetEmergencyBrakePreHash() []byte {
	if x != nil {
		return x.EmergencyBrakePreHash
	}
	return nil
}

type SoftwareVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SoftwareVersion) Reset() {
	*x = SoftwareVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareVersion) ProtoMessage() {}

func (x *SoftwareVersion) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareVersion.ProtoReflect.Descriptor instead.
func (*SoftwareVersion) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{3}
}

func (x *SoftwareVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type PeerCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerCount uint64 `protobuf:"varint,1,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
}

func (x *PeerCount) Reset() {
	*x = PeerCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerCount) ProtoMessage() {}

func (x *PeerCount) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerCount.ProtoReflect.Descriptor instead.
func (*PeerCount) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{4}
}

func (x *PeerCount) GetPeerCount() uint64 {
	if x != nil {
		return x.PeerCount
	}
	return 0
}

type TransactionIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIndex uint64 `protobuf:"varint,1,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
}

func (x *TransactionIndex) Reset() {
	*x = TransactionIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionIndex) ProtoMessage() {}

func (x *TransactionIndex) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionIndex.ProtoReflect.Descriptor instead.
func (*TransactionIndex) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionIndex) GetTxIndex() uint64 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

var File_controller_proto protoreflect.FileDescriptor

var file_controller_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1a,
	0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x30, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe4, 0x03, 0x0a,
	0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x72, 0x61,
	0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x50, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x50, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x2b, 0x0a, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x2a, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x10,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x32, 0xde, 0x06, 0x0a, 0x0a,
	0x52, 0x50, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x1a, 0x17,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x61, 0x77, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x18, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x1a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x1c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xde, 0x01, 0x0a,
	0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x32, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x54, 0x4c, 0x69,
	0x53, 0x75, 0x6e, 0x6e, 0x79, 0x69, 0x2f, 0x63, 0x69, 0x74, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2d,
	0x67, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_proto_rawDescOnce sync.Once
	file_controller_proto_rawDescData = file_controller_proto_rawDesc
)

func file_controller_proto_rawDescGZIP() []byte {
	file_controller_proto_rawDescOnce.Do(func() {
		file_controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_proto_rawDescData)
	})
	return file_controller_proto_rawDescData
}

var file_controller_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_controller_proto_goTypes = []interface{}{
	(*Flag)(nil),                                 // 0: controller.Flag
	(*BlockNumber)(nil),                          // 1: controller.BlockNumber
	(*SystemConfig)(nil),                         // 2: controller.SystemConfig
	(*SoftwareVersion)(nil),                      // 3: controller.SoftwareVersion
	(*PeerCount)(nil),                            // 4: controller.PeerCount
	(*TransactionIndex)(nil),                     // 5: controller.TransactionIndex
	(*types.RawTransaction)(nil),                 // 6: blockchain.RawTransaction
	(*types.RawTransactions)(nil),                // 7: blockchain.RawTransactions
	(*proto.Hash)(nil),                           // 8: common.Hash
	(*proto.Empty)(nil),                          // 9: common.Empty
	(*proto.NodeNetInfo)(nil),                    // 10: common.NodeNetInfo
	(*proto.Proposal)(nil),                       // 11: common.Proposal
	(*proto.ProposalWithProof)(nil),              // 12: common.ProposalWithProof
	(*proto.Hashes)(nil),                         // 13: common.Hashes
	(*types.CompactBlock)(nil),                   // 14: blockchain.CompactBlock
	(*proto.StatusCode)(nil),                     // 15: common.StatusCode
	(*proto.TotalNodeInfo)(nil),                  // 16: common.TotalNodeInfo
	(*proto.ProposalResponse)(nil),               // 17: common.ProposalResponse
	(*proto.ConsensusConfigurationResponse)(nil), // 18: common.ConsensusConfigurationResponse
}
var file_controller_proto_depIdxs = []int32{
	0,  // 0: controller.RPCService.GetBlockNumber:input_type -> controller.Flag
	6,  // 1: controller.RPCService.SendRawTransaction:input_type -> blockchain.RawTransaction
	7,  // 2: controller.RPCService.SendRawTransactions:input_type -> blockchain.RawTransactions
	8,  // 3: controller.RPCService.GetBlockByHash:input_type -> common.Hash
	1,  // 4: controller.RPCService.GetBlockByNumber:input_type -> controller.BlockNumber
	8,  // 5: controller.RPCService.GetTransaction:input_type -> common.Hash
	9,  // 6: controller.RPCService.GetSystemConfig:input_type -> common.Empty
	9,  // 7: controller.RPCService.GetVersion:input_type -> common.Empty
	1,  // 8: controller.RPCService.GetBlockHash:input_type -> controller.BlockNumber
	8,  // 9: controller.RPCService.GetTransactionBlockNumber:input_type -> common.Hash
	8,  // 10: controller.RPCService.GetTransactionIndex:input_type -> common.Hash
	9,  // 11: controller.RPCService.GetPeerCount:input_type -> common.Empty
	10, // 12: controller.RPCService.AddNode:input_type -> common.NodeNetInfo
	9,  // 13: controller.RPCService.GetPeersInfo:input_type -> common.Empty
	9,  // 14: controller.Consensus2ControllerService.GetProposal:input_type -> common.Empty
	11, // 15: controller.Consensus2ControllerService.CheckProposal:input_type -> common.Proposal
	12, // 16: controller.Consensus2ControllerService.CommitBlock:input_type -> common.ProposalWithProof
	1,  // 17: controller.RPCService.GetBlockNumber:output_type -> controller.BlockNumber
	8,  // 18: controller.RPCService.SendRawTransaction:output_type -> common.Hash
	13, // 19: controller.RPCService.SendRawTransactions:output_type -> common.Hashes
	14, // 20: controller.RPCService.GetBlockByHash:output_type -> blockchain.CompactBlock
	14, // 21: controller.RPCService.GetBlockByNumber:output_type -> blockchain.CompactBlock
	6,  // 22: controller.RPCService.GetTransaction:output_type -> blockchain.RawTransaction
	2,  // 23: controller.RPCService.GetSystemConfig:output_type -> controller.SystemConfig
	3,  // 24: controller.RPCService.GetVersion:output_type -> controller.SoftwareVersion
	8,  // 25: controller.RPCService.GetBlockHash:output_type -> common.Hash
	1,  // 26: controller.RPCService.GetTransactionBlockNumber:output_type -> controller.BlockNumber
	5,  // 27: controller.RPCService.GetTransactionIndex:output_type -> controller.TransactionIndex
	4,  // 28: controller.RPCService.GetPeerCount:output_type -> controller.PeerCount
	15, // 29: controller.RPCService.AddNode:output_type -> common.StatusCode
	16, // 30: controller.RPCService.GetPeersInfo:output_type -> common.TotalNodeInfo
	17, // 31: controller.Consensus2ControllerService.GetProposal:output_type -> common.ProposalResponse
	15, // 32: controller.Consensus2ControllerService.CheckProposal:output_type -> common.StatusCode
	18, // 33: controller.Consensus2ControllerService.CommitBlock:output_type -> common.ConsensusConfigurationResponse
	17, // [17:34] is the sub-list for method output_type
	0,  // [0:17] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_controller_proto_init() }
func file_controller_proto_init() {
	if File_controller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_controller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_controller_proto_goTypes,
		DependencyIndexes: file_controller_proto_depIdxs,
		MessageInfos:      file_controller_proto_msgTypes,
	}.Build()
	File_controller_proto = out.File
	file_controller_proto_rawDesc = nil
	file_controller_proto_goTypes = nil
	file_controller_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RPCServiceClient is the client API for RPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCServiceClient interface {
	// flag means latest or pending.
	// true means pending, false means latest.
	GetBlockNumber(ctx context.Context, in *Flag, opts ...grpc.CallOption) (*BlockNumber, error)
	SendRawTransaction(ctx context.Context, in *types.RawTransaction, opts ...grpc.CallOption) (*proto.Hash, error)
	SendRawTransactions(ctx context.Context, in *types.RawTransactions, opts ...grpc.CallOption) (*proto.Hashes, error)
	GetBlockByHash(ctx context.Context, in *proto.Hash, opts ...grpc.CallOption) (*types.CompactBlock, error)
	GetBlockByNumber(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*types.CompactBlock, error)
	GetTransaction(ctx context.Context, in *proto.Hash, opts ...grpc.CallOption) (*types.RawTransaction, error)
	GetSystemConfig(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*SystemConfig, error)
	GetVersion(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*SoftwareVersion, error)
	GetBlockHash(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*proto.Hash, error)
	GetTransactionBlockNumber(ctx context.Context, in *proto.Hash, opts ...grpc.CallOption) (*BlockNumber, error)
	GetTransactionIndex(ctx context.Context, in *proto.Hash, opts ...grpc.CallOption) (*TransactionIndex, error)
	GetPeerCount(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*PeerCount, error)
	// add new node
	AddNode(ctx context.Context, in *proto.NodeNetInfo, opts ...grpc.CallOption) (*proto.StatusCode, error)
	// get peers info
	GetPeersInfo(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.TotalNodeInfo, error)
}

type rPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCServiceClient(cc grpc.ClientConnInterface) RPCServiceClient {
	return &rPCServiceClient{cc}
}

func (c *rPCServiceClient) GetBlockNumber(ctx context.Context, in *Flag, opts ...grpc.CallOption) (*BlockNumber, error) {
	out := new(BlockNumber)
	err := c.cc.Invoke(ctx, "/controller.RPCService/GetBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) SendRawTransaction(ctx context.Context, in *types.RawTransaction, opts ...grpc.CallOption) (*proto.Hash, error) {
	out := new(proto.Hash)
	err := c.cc.Invoke(ctx, "/controller.RPCService/SendRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) SendRawTransactions(ctx context.Context, in *types.RawTransactions, opts ...grpc.CallOption) (*proto.Hashes, error) {
	out := new(proto.Hashes)
	err := c.cc.Invoke(ctx, "/controller.RPCService/SendRawTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) GetBlockByHash(ctx context.Context, in *proto.Hash, opts ...grpc.CallOption) (*types.CompactBlock, error) {
	out := new(types.CompactBlock)
	err := c.cc.Invoke(ctx, "/controller.RPCService/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) GetBlockByNumber(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*types.CompactBlock, error) {
	out := new(types.CompactBlock)
	err := c.cc.Invoke(ctx, "/controller.RPCService/GetBlockByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) GetTransaction(ctx context.Context, in *proto.Hash, opts ...grpc.CallOption) (*types.RawTransaction, error) {
	out := new(types.RawTransaction)
	err := c.cc.Invoke(ctx, "/controller.RPCService/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) GetSystemConfig(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*SystemConfig, error) {
	out := new(SystemConfig)
	err := c.cc.Invoke(ctx, "/controller.RPCService/GetSystemConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) GetVersion(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*SoftwareVersion, error) {
	out := new(SoftwareVersion)
	err := c.cc.Invoke(ctx, "/controller.RPCService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) GetBlockHash(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*proto.Hash, error) {
	out := new(proto.Hash)
	err := c.cc.Invoke(ctx, "/controller.RPCService/GetBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) GetTransactionBlockNumber(ctx context.Context, in *proto.Hash, opts ...grpc.CallOption) (*BlockNumber, error) {
	out := new(BlockNumber)
	err := c.cc.Invoke(ctx, "/controller.RPCService/GetTransactionBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) GetTransactionIndex(ctx context.Context, in *proto.Hash, opts ...grpc.CallOption) (*TransactionIndex, error) {
	out := new(TransactionIndex)
	err := c.cc.Invoke(ctx, "/controller.RPCService/GetTransactionIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) GetPeerCount(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*PeerCount, error) {
	out := new(PeerCount)
	err := c.cc.Invoke(ctx, "/controller.RPCService/GetPeerCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) AddNode(ctx context.Context, in *proto.NodeNetInfo, opts ...grpc.CallOption) (*proto.StatusCode, error) {
	out := new(proto.StatusCode)
	err := c.cc.Invoke(ctx, "/controller.RPCService/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) GetPeersInfo(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.TotalNodeInfo, error) {
	out := new(proto.TotalNodeInfo)
	err := c.cc.Invoke(ctx, "/controller.RPCService/GetPeersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServiceServer is the server API for RPCService service.
type RPCServiceServer interface {
	// flag means latest or pending.
	// true means pending, false means latest.
	GetBlockNumber(context.Context, *Flag) (*BlockNumber, error)
	SendRawTransaction(context.Context, *types.RawTransaction) (*proto.Hash, error)
	SendRawTransactions(context.Context, *types.RawTransactions) (*proto.Hashes, error)
	GetBlockByHash(context.Context, *proto.Hash) (*types.CompactBlock, error)
	GetBlockByNumber(context.Context, *BlockNumber) (*types.CompactBlock, error)
	GetTransaction(context.Context, *proto.Hash) (*types.RawTransaction, error)
	GetSystemConfig(context.Context, *proto.Empty) (*SystemConfig, error)
	GetVersion(context.Context, *proto.Empty) (*SoftwareVersion, error)
	GetBlockHash(context.Context, *BlockNumber) (*proto.Hash, error)
	GetTransactionBlockNumber(context.Context, *proto.Hash) (*BlockNumber, error)
	GetTransactionIndex(context.Context, *proto.Hash) (*TransactionIndex, error)
	GetPeerCount(context.Context, *proto.Empty) (*PeerCount, error)
	// add new node
	AddNode(context.Context, *proto.NodeNetInfo) (*proto.StatusCode, error)
	// get peers info
	GetPeersInfo(context.Context, *proto.Empty) (*proto.TotalNodeInfo, error)
}

// UnimplementedRPCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCServiceServer struct {
}

func (*UnimplementedRPCServiceServer) GetBlockNumber(context.Context, *Flag) (*BlockNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockNumber not implemented")
}
func (*UnimplementedRPCServiceServer) SendRawTransaction(context.Context, *types.RawTransaction) (*proto.Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRawTransaction not implemented")
}
func (*UnimplementedRPCServiceServer) SendRawTransactions(context.Context, *types.RawTransactions) (*proto.Hashes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRawTransactions not implemented")
}
func (*UnimplementedRPCServiceServer) GetBlockByHash(context.Context, *proto.Hash) (*types.CompactBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (*UnimplementedRPCServiceServer) GetBlockByNumber(context.Context, *BlockNumber) (*types.CompactBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNumber not implemented")
}
func (*UnimplementedRPCServiceServer) GetTransaction(context.Context, *proto.Hash) (*types.RawTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedRPCServiceServer) GetSystemConfig(context.Context, *proto.Empty) (*SystemConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemConfig not implemented")
}
func (*UnimplementedRPCServiceServer) GetVersion(context.Context, *proto.Empty) (*SoftwareVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedRPCServiceServer) GetBlockHash(context.Context, *BlockNumber) (*proto.Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHash not implemented")
}
func (*UnimplementedRPCServiceServer) GetTransactionBlockNumber(context.Context, *proto.Hash) (*BlockNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionBlockNumber not implemented")
}
func (*UnimplementedRPCServiceServer) GetTransactionIndex(context.Context, *proto.Hash) (*TransactionIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionIndex not implemented")
}
func (*UnimplementedRPCServiceServer) GetPeerCount(context.Context, *proto.Empty) (*PeerCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerCount not implemented")
}
func (*UnimplementedRPCServiceServer) AddNode(context.Context, *proto.NodeNetInfo) (*proto.StatusCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (*UnimplementedRPCServiceServer) GetPeersInfo(context.Context, *proto.Empty) (*proto.TotalNodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeersInfo not implemented")
}

func RegisterRPCServiceServer(s *grpc.Server, srv RPCServiceServer) {
	s.RegisterService(&_RPCService_serviceDesc, srv)
}

func _RPCService_GetBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/GetBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetBlockNumber(ctx, req.(*Flag))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RawTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).SendRawTransaction(ctx, req.(*types.RawTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_SendRawTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.RawTransactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).SendRawTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/SendRawTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).SendRawTransactions(ctx, req.(*types.RawTransactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetBlockByHash(ctx, req.(*proto.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/GetBlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetBlockByNumber(ctx, req.(*BlockNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetTransaction(ctx, req.(*proto.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_GetSystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetSystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/GetSystemConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetSystemConfig(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetVersion(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetBlockHash(ctx, req.(*BlockNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_GetTransactionBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetTransactionBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/GetTransactionBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetTransactionBlockNumber(ctx, req.(*proto.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_GetTransactionIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetTransactionIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/GetTransactionIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetTransactionIndex(ctx, req.(*proto.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_GetPeerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetPeerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/GetPeerCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetPeerCount(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.NodeNetInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).AddNode(ctx, req.(*proto.NodeNetInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_GetPeersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).GetPeersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.RPCService/GetPeersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).GetPeersInfo(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.RPCService",
	HandlerType: (*RPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockNumber",
			Handler:    _RPCService_GetBlockNumber_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _RPCService_SendRawTransaction_Handler,
		},
		{
			MethodName: "SendRawTransactions",
			Handler:    _RPCService_SendRawTransactions_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _RPCService_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _RPCService_GetBlockByNumber_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _RPCService_GetTransaction_Handler,
		},
		{
			MethodName: "GetSystemConfig",
			Handler:    _RPCService_GetSystemConfig_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _RPCService_GetVersion_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _RPCService_GetBlockHash_Handler,
		},
		{
			MethodName: "GetTransactionBlockNumber",
			Handler:    _RPCService_GetTransactionBlockNumber_Handler,
		},
		{
			MethodName: "GetTransactionIndex",
			Handler:    _RPCService_GetTransactionIndex_Handler,
		},
		{
			MethodName: "GetPeerCount",
			Handler:    _RPCService_GetPeerCount_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _RPCService_AddNode_Handler,
		},
		{
			MethodName: "GetPeersInfo",
			Handler:    _RPCService_GetPeersInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}

// Consensus2ControllerServiceClient is the client API for Consensus2ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Consensus2ControllerServiceClient interface {
	// Consensus request a Proposal to start consensus
	// ret: proposal
	GetProposal(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.ProposalResponse, error)
	// when Consensus received a new proposal from other nodes, it will ask controller to check it
	// args: proposal hash
	// ret: ok or not
	CheckProposal(ctx context.Context, in *proto.Proposal, opts ...grpc.CallOption) (*proto.StatusCode, error)
	// after Consensus, tell controller a proposal has committed
	CommitBlock(ctx context.Context, in *proto.ProposalWithProof, opts ...grpc.CallOption) (*proto.ConsensusConfigurationResponse, error)
}

type consensus2ControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensus2ControllerServiceClient(cc grpc.ClientConnInterface) Consensus2ControllerServiceClient {
	return &consensus2ControllerServiceClient{cc}
}

func (c *consensus2ControllerServiceClient) GetProposal(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.ProposalResponse, error) {
	out := new(proto.ProposalResponse)
	err := c.cc.Invoke(ctx, "/controller.Consensus2ControllerService/GetProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensus2ControllerServiceClient) CheckProposal(ctx context.Context, in *proto.Proposal, opts ...grpc.CallOption) (*proto.StatusCode, error) {
	out := new(proto.StatusCode)
	err := c.cc.Invoke(ctx, "/controller.Consensus2ControllerService/CheckProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensus2ControllerServiceClient) CommitBlock(ctx context.Context, in *proto.ProposalWithProof, opts ...grpc.CallOption) (*proto.ConsensusConfigurationResponse, error) {
	out := new(proto.ConsensusConfigurationResponse)
	err := c.cc.Invoke(ctx, "/controller.Consensus2ControllerService/CommitBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Consensus2ControllerServiceServer is the server API for Consensus2ControllerService service.
type Consensus2ControllerServiceServer interface {
	// Consensus request a Proposal to start consensus
	// ret: proposal
	GetProposal(context.Context, *proto.Empty) (*proto.ProposalResponse, error)
	// when Consensus received a new proposal from other nodes, it will ask controller to check it
	// args: proposal hash
	// ret: ok or not
	CheckProposal(context.Context, *proto.Proposal) (*proto.StatusCode, error)
	// after Consensus, tell controller a proposal has committed
	CommitBlock(context.Context, *proto.ProposalWithProof) (*proto.ConsensusConfigurationResponse, error)
}

// UnimplementedConsensus2ControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConsensus2ControllerServiceServer struct {
}

func (*UnimplementedConsensus2ControllerServiceServer) GetProposal(context.Context, *proto.Empty) (*proto.ProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposal not implemented")
}
func (*UnimplementedConsensus2ControllerServiceServer) CheckProposal(context.Context, *proto.Proposal) (*proto.StatusCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProposal not implemented")
}
func (*UnimplementedConsensus2ControllerServiceServer) CommitBlock(context.Context, *proto.ProposalWithProof) (*proto.ConsensusConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitBlock not implemented")
}

func RegisterConsensus2ControllerServiceServer(s *grpc.Server, srv Consensus2ControllerServiceServer) {
	s.RegisterService(&_Consensus2ControllerService_serviceDesc, srv)
}

func _Consensus2ControllerService_GetProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Consensus2ControllerServiceServer).GetProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Consensus2ControllerService/GetProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Consensus2ControllerServiceServer).GetProposal(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus2ControllerService_CheckProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Consensus2ControllerServiceServer).CheckProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Consensus2ControllerService/CheckProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Consensus2ControllerServiceServer).CheckProposal(ctx, req.(*proto.Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus2ControllerService_CommitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.ProposalWithProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Consensus2ControllerServiceServer).CommitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Consensus2ControllerService/CommitBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Consensus2ControllerServiceServer).CommitBlock(ctx, req.(*proto.ProposalWithProof))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consensus2ControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.Consensus2ControllerService",
	HandlerType: (*Consensus2ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProposal",
			Handler:    _Consensus2ControllerService_GetProposal_Handler,
		},
		{
			MethodName: "CheckProposal",
			Handler:    _Consensus2ControllerService_CheckProposal_Handler,
		},
		{
			MethodName: "CommitBlock",
			Handler:    _Consensus2ControllerService_CommitBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}
